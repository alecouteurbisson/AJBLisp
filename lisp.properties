# Define SciTE settings for lisp files.

file.patterns.lisp=*.lsp;*.lisp

filter.lisp=LISP (lsp lisp)|$(file.patterns.lisp)|

file.patterns.braces=$(file.patterns.lisp)

api.*.lsp=c:\Program Files\AJBLisp\AJBLisp.api

word.chars.lisp=$(chars.alpha)$(chars.numeric)_-<>.#+@$%^&:~?|*=
word.characters.$(file.patterns.lisp)=$(word.chars.lisp)
calltip.lisp.word.characters=$(word.chars.lisp)
autocomplete.lisp.start.characters= $(word.chars.lisp)

lexer.$(file.patterns.lisp)=lisp

command.go.*.lsp=c:\Program Files\AJBLisp\AJBLisp.exe -l$(FileNameExt)

# Lisp primitive functions, AJBLisp dialect
keywords.$(file.patterns.lisp)= \
defmacro logfile cond inc or gmt writebyte get ln length make-vector rem btgl \
dec nth eq atan writeword read setq cons for acosh nthcdr numberp exp now pop \
let integerp not error break quote cd tzset string> float string< string= destroy \
prog1 consp ssort eval plist variablep dumphash - loop / typeof time floor . null + \
fac * cddr defkey put schar cdrassoc collect symbolp log saferead errormsg tokenise \
keyp = locale vectorp < sinsert open-file silently > readlong progn symbol typep \
writelong and obs dump cadr substring readline for-each onep string backtrace \
terpri sqrt integer writechar cdar integer-format set oblist throw caar bclr last \
floatp abs filep catch assoc slet random push apply readword bor bxor lambda \
stringp <> bcnt load reverse until fsubrp constantp <= tan encode-time concat \
vector defun insert file-position sinh >= gensym sin untrace subrp car charp chars \
remprop ceil readbyte write trace defconstant mapc date writeln remove-file macro \
cosh statistics upper-case readchar delete psetq member minusp errorset eof print \
atom subst power plusp date-time bshift system float-format list string>= rplacd \
vset string-search rplaca string<= lower-casep cdr string<> bnot atanh bset flush \
acos band append equal execp time-string asin vlist btst while ashift zerop \
lower-case exit close-file eql move-file asinh tanh upper-casep cos println sort \
vref listp char if scripted sleep addr when unless write-size print-size guard \
gwindow gclose gclear gmove gpos gdraw gpoint gpick gellipse grectangle gviewport \
gvtrans2 gpen gbrush gtext gtextsize gcolour gfont create-directory delete-directory \
delete-file copy-file move-file print-format protect-file filter

# Error codes
keywords2.$(file.patterns.lisp)= \
:err_unknown :fatal_bad_stack :err_m_inv :fatal_stack_ovf :err_atom_exp \
:fatal_heap_ovf :err_num_exp :err_bad_func :err_m_unk :err_chr_exp :err_str_len \
:err_patom :err_prt_buf :err_m_undf :err_inv_op :err_sym_len :err_m_ovrf :err_key_exp \
:err_bit_num :err_eof_list :err_bad_rmac :err_bad_formal :err_kbd_buf \
:fatal_stack :err_file_exp :err_let_bind :err_no_rpar :fatal_heap :err_kmem \
:err_eof_esc :err_num_formal :err_catch :err_null_loop :err_bad_case :err_m_divz \
:err_unreadable :err_bad_arg :err_vec_idx :err_user :err_m_inac \
:err_tok_len :err_int_exp :err_list_exp :err_bad_typ :err_long_path :err_m_dom \
:err_bad_real :err_m_iovf :err_bad_rpar :err_str_chr :err_debug :err_disc_fault \
:err_m_sing :err_real_exp :err_permission :err_eof_str :err_str_exp :err_bad_mac \
:err_immutable :err_bad_plist :err_inv_key :err_disk_full :err_bad_assoc :err_sym_exp \
:err_bad_int :err_num_links :err_vec_exp :err_not_dir :err_bad_ascii :fatal_exit \
:err_prog :err_vec_dim :err_num_args :err_no_case :fatal_memory :err_index :err_heap \
:err_m_fpval :err_os :err_process :err_win_open :err_win_exp :err_inv_vp :err_inv_bstyl \
:err_inv_pstyl :err_vt2_sing

# Constants
keywords3.$(file.patterns.lisp)= \
:stderr :stdin :stdout \
:read :write :create \
:seek-start :seek-relative :seek-end \
:nocase :case :collate \
:symbol :constant :key :cons :character :integer :float \
:string :file :vector :subr :subrl :fsubr :fsubrl \
:space :tab :newline :eof \
:pi :e \
:none :else \
nil t lambda macro

comment.block.lisp=;
comment.box.start.lisp=;;
comment.box.middle.lisp=;;
comment.box.end.lisp=;;

# LISP styles

# Default
style.lisp.32=$(font.base)
# White space
style.lisp.0=fore:#808080
# Line Comment
style.lisp.1=$(colour.code.comment.line)
# Number
style.lisp.2=$(colour.number)
# Keyword - Functions
style.lisp.3=$(colour.keyword)
# Keyword2 - Error codes
style.lisp.4=fore:#806010
# Keyword3 - Constants
style.lisp.5=fore:#7000d0
# String "..."
style.lisp.6=$(colour.string)
# Operators
style.lisp.10=$(colour.operator)
# Identifiers
style.lisp.9=
# End of line where string is not closed
style.lisp.8=fore:#000000,$(font.base),back:#fecccc,eolfilled
# Matched Operators
style.lisp.34=fore:#0000FF
style.lisp.35=fore:#FF0000
# Braces are only matched in operator style
braces.lisp.style=10
# Line Full-line Comment
style.lisp.11=$(colour.code.comment.line),back:#E0FFFF,eolfilled


